# .github/workflows/ci-cd-pipeline.yml

name: DevOps Meme/Quote Generator CI/CD Pipeline

on:
  # Triggers the workflow on push events to the master branch (for apply job later)
  push:
    branches: [ "master" ]
  # Triggers the workflow on pull request events but only for the master branch
  pull_request:
    branches: [ "master" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # --- Existing Job: Build and Test ---
  build-test:
    name: 'Build & Test Docker Image'
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE
      - uses: actions/checkout@v4

      # Example step: Set up Python (if needed for local tests)
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      # Example step: Install dependencies (if running local tests)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Check if requirements.txt exists and install dependencies
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # --- Docker Steps ---
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub (or ECR)
        # Use secrets to store your Docker Hub/ECR credentials
        # This example assumes Docker Hub. Adjust for ECR if needed.
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }} # Set this secret in GitHub
          password: ${{ secrets.DOCKERHUB_TOKEN }}    # Set this secret in GitHub

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true # Push the image
          # Tag the image with the commit SHA for uniqueness
          tags: samisondocker/devops-meme-quote-generator:${{ github.sha }} # <--- REPLACE YOUR USERNAME

  # --- New Job: Terraform Plan ---
  terraform-plan:
    name: 'Terraform Plan'
    # This job runs only on pull requests
    if: github.event_name == 'pull_request'
    # It needs to run on the same runner type
    runs-on: ubuntu-latest
    # It should only run after the build-test job succeeds
    needs: build-test

    # Environment variables specific to this job
    env:
      TF_VAR_ssh_key_name: ${{ secrets.TF_SSH_KEY_NAME }} # Pass SSH key name as a TF variable

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE
      - name: Checkout
        uses: actions/checkout@v4

      # Set up Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        # Optionally specify a version: with: terraform_version: 1.5.0

      # Configure AWS credentials (needed for Terraform to interact with AWS)
      # You need to set AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY secrets in GitHub
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Use the same region as your Terraform config

      # Navigate to the terraform directory and run Terraform commands
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform # Specify working directory

      # Terraform Validate
      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform

      # Terraform Plan
      # Note: We are NOT using -var for ssh_key_name here because it's set via env TF_VAR_ssh_key_name
      # The plan output is saved to a file for potential commenting on the PR
      - name: Terraform Plan
        id: plan # Give this step an ID so we can reference its output later
        run: |
          terraform plan -no-color -out=tfplan.binary | tee tfplan.txt
        working-directory: ./terraform
        # Continue on error to allow posting the plan even if it fails (e.g., syntax error)
        continue-on-error: true

      # Post the plan as a comment on the PR
      # Requires the pull-request-comment token (see below)
      - name: Comment Terraform Plan on PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' # Only run on PRs
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Default token, has PR comment permissions
          script: |
            const fs = require('fs');
            const planOutput = fs.readFileSync('./terraform/tfplan.txt', 'utf8');
            const { data: comment } = await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number, // PR is an issue in GitHub API
              body: `## Terraform Plan Output\n\`\`\`terraform\n${planOutput}\n\`\`\``
            });
      # (Optional) Upload the binary plan file as an artifact (useful for apply steps later, requires storage)
      # - name: Upload Terraform Plan Binary
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: tfplan-binary
      #     path: ./terraform/tfplan.binary
