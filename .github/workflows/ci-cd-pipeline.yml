name: DevOps Meme/Quote Generator CI/CD Pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  # --- Job: Build and Test ---
  build-test:
    name: 'Build & Test Docker Image'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub (or ECR)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: samisondocker/devops-meme-quote-generator:${{ github.sha }}

  # --- Job: Terraform Plan ---
  terraform-plan:
    name: 'Terraform Plan'
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: build-test

    permissions:
      contents: read
      pull-requests: write

    env:
      TF_VAR_ssh_key_name: ${{ secrets.TF_SSH_KEY_NAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -out=tfplan.binary | tee tfplan.txt
          echo 'TF_PLAN<<EOF' >> $GITHUB_ENV
          cat tfplan.txt >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
        working-directory: ./terraform
        continue-on-error: true

      - name: Comment Terraform Plan on PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## Terraform Plan Output
\`\`\`terraform
${process.env.TF_PLAN}
\`\`\``
            });

  # --- Job: Terraform Apply ---
  terraform-apply:
    name: 'Terraform Apply (Manual Approval Required)'
    if: (github.ref == 'refs/heads/master' && github.event_name == 'push') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: [build-test]

    environment:
      name: production
      url: ${{ steps.get_ip.outputs.public_ip_url }}

    env:
      TF_VAR_ssh_key_name: ${{ secrets.TF_SSH_KEY_NAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform

      - name: Get EC2 Public IP
        id: get_ip
        run: |
          export EC2_IP=$(terraform output -raw ec2_instance_public_ip)
          echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV
          echo "public_ip_url=http://$EC2_IP:5000" >> $GITHUB_OUTPUT
        working-directory: ./terraform
